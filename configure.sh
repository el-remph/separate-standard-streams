#!/bin/sh -e
# SPDX-FileCopyrightText:  2023-2024 The Remph <lhr@disroot.org>
# SPDX-License-Identifier: GPL-3.0-or-later
# -*- indent-tabs-mode: t; sh-basic-offset: 8; fill-column: 75 -*-
#
# Supported in this script:
# - strsignal(3) or sys_siglist[]
# - unlocked_stdio(3), specifically f{ileno,puts,write,flush}_unlocked
# - <sys/select.h>
#
# Supported in preprocessor chicanery in the source code:
# - __attribute__
# - stdbool.h and the presence of _Bool
# - inline, restrict
# - sigqueue(3) or kill(2)
# - noreturn
#
# Unsupported:
# - <err.h> -- could use gnulib error.h and macros? But that depends on
#   __VA_OPT__. Could port err(3), warn(3) etc. uses to error.h instead, but
#   error.h is generally less portable, and this would make most builds
#   dependent on gnulib, vs the existing situation where err.h is just
#   generally available. All this does is introduce complication to building

if [ $# -ne 0 ]; then
	echo >&2 "\
Usage: $0 > config.h
It's best to just run \`make', which will handle this automatically
This is not an autotools configure script
Dependencies:
- POSIX /bin/sh
- A C compiler: can be set by the environment variable CC, defaults to just
  \`cc' on the PATH. The env var CC is like with make, and is inherited from
  make if this script is run from in a makefile: it is split and expanded by
  the shell, so can include flags to pass to the compiler also"
	exit 1 # --help notwithstanding, so it's clear there's no valid output
fi

chat() {
	echo "$0: $*" >&2
}

# CC and feature_test_macros(7)
CC=${CC:-cc} define_GNU= define_BSD= define_POSIX2008= define_DARWIN=

chat "running compiler: $CC"

headers="`$CC -E -<<EOF
#define _GNU_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _DEFAULT_SOURCE
#define _BSD_SOURCE
#define _DARWIN_C_SOURCE
#include <stdio.h>
#include <string.h>
#include <signal.h>
EOF`"

# Leading path components stripped to prevent the C comment-end sequence
# appearing -- not especially likely, but impossible if there are no slashes
echo "/* Auto-generated by ${0##*/} */"

# unlocked_stdio(3)
for f in fwrite_unlocked fileno_unlocked fflush_unlocked
do
	case $headers in
		*$f*)
			define_BSD=1 define_DARWIN=1
			echo "#define ${f%_unlocked} $f"
			chat "$f(3) found"
			;;
		*) chat "$f not found, using regular ${f%_unlocked}(3) instead" ;;
	esac
done

# strsignal(3)
case $headers in
	*strsignal*)
		define_GNU=1 define_POSIX2008=1
		echo '#define HAVE_STRSIGNAL'
		chat 'strsignal(3) found'
		;;
	*sys_siglist*)
		define_BSD=1
		echo '#define HAVE_STRSIGNAL
#define strsignal(s) sys_siglist[s]'
		chat 'strsignal(3) not found; substituting with sys_siglist[]'
		;;
	*) chat '
strsignal(3)/sys_siglist[] not found; signal descriptions will be unavailable'
	   ;;
esac

# sys_select.h(0p)
if $CC -E -<<EOF>/dev/null
#include <sys/select.h>
EOF
then
	echo '#define HAVE_SYS_SELECT_H'
	chat '<sys/select.h> found'
else
	chat '<sys/select.h> not found; probably nbd'
fi

# feature_test_macros(7)
[ -n $define_BSD ] && echo '#define _BSD_SOURCE
#define _DEFAULT_SOURCE'
[ -n $define_DARWIN ] && echo '#define _DARWIN_C_SOURCE'
[ -n $define_GNU ] && echo '#define _GNU_SOURCE'
[ -n $define_POSIX2008 ] && echo '#define _POSIX_C_SOURCE 200809L'
