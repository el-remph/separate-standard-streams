#!/bin/sh -e
# SPDX-FileCopyrightText:  2023-2024 The Remph <lhr@disroot.org>
# SPDX-License-Identifier: GPL-3.0-or-later
# -*- indent-tabs-mode: t; sh-basic-offset: 8; fill-column: 75 -*-
#
# Supported in this script:
# - strsignal(3) or sys_siglist[]
# - unlocked_stdio(3)
# - headers: <sys/select.h>, <sys/ioctl.h>
#
# Supported in preprocessor chicanery in the source code:
# - __attribute__
# - stdbool.h and the presence of _Bool
# - inline, restrict
# - sigqueue(3) or kill(2)
# - noreturn
#
# Unsupported:
# - <err.h> -- could use gnulib error.h and macros? But that depends on
#   __VA_OPT__. Could port err(3), warn(3) etc. uses to error.h instead, but
#   error.h is generally less portable, and this would make most builds
#   dependent on gnulib, vs the existing situation where err.h is just
#   generally available. All this does is introduce complication to building

if [ $# -ne 0 ]; then
	echo >&2 "\
It's best to just run \`make', which will handle this automatically
This is not an autotools configure script
Dependencies (all POSIX):
- /bin/sh
- sed
- tee and grep for unlocked-stdio.h
- A C compiler: can be set by the environment variable CC, defaults to just
  \`cc' on the PATH. The env var CC is like with make, and is inherited from
  make if this script is run from in a makefile: it is split and expanded by
  the shell, so can include flags to pass to the compiler also"
	exit 1 # --help notwithstanding, so it's clear there's no valid output
fi

chat() {
	echo "$0: $*" >&2
}

trap '
	exit_val=$?
	if test $exit_val -ne 0; then
		chat "cleaning up after error"
		rm -fv config.h compat/unlocked-stdio.h
		exit $exit_val
	fi
' 0

# CC and feature_test_macros(7)
CC=${CC:-cc} define_GNU= define_BSD= define_POSIX2008= define_DARWIN=

chat "running compiler: $CC"

headers="`$CC -E -<<EOF
#define _GNU_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _DEFAULT_SOURCE
#define _BSD_SOURCE
#define _DARWIN_C_SOURCE
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <wchar.h>
EOF`"

# Leading path components stripped to prevent the C comment-end sequence
# appearing -- not especially likely, but impossible if there are no slashes
head_comment="/* Auto-generated by ${0##*/} */"

# unlocked_stdio(3)
chat 'Generating compat/unlocked-stdio.h'
# The horrible, terrible test below (everything after the sed)
# is to see if any *_unlocked functions were found, so it can set
# the appropriate feature_test_macros(7). Better hope your tee(1)
# handles SIGPIPE right
if echo "$headers" | sed -En '
1i\
'"$head_comment"'\
#ifndef UNLOCKED_STDIO_H\
#define UNLOCKED_STDIO_H\
\
#include <stdio.h>\
#include <wchar.h>\

# The first and last captures here are just attempts to recreate \b
s/^(.*[^A-Za-z0-9_])?(f[a-z]+|(ge|pu)tw?([cs]|char)|clearerr)_unlocked([^A-Za-z0-9_].*|$)/# define    \2\t\2_unlocked/p

$a\
\
#endif
' | tee compat/unlocked-stdio.h | grep -q '^# define'
then
	define_BSD=1 define_DARWIN=1
fi


chat 'Generating config.h'
exec >config.h

echo "$head_comment
#ifndef CONFIG_H
#define CONFIG_H
"
printf '#define SSSS_VERSION "%s"\n' "$(git describe --tags --long 2>/dev/null || echo v0.4.1)"

# strsignal(3)
case $headers in
	*strsignal*)
		define_GNU=1 define_POSIX2008=1
		echo '#define HAVE_STRSIGNAL'
		chat 'strsignal(3) found'
		;;
	*sys_siglist*)
		define_BSD=1
		echo '#define HAVE_STRSIGNAL
#define strsignal(s) sys_siglist[s]'
		chat 'strsignal(3) not found; substituting with sys_siglist[]'
		;;
	*)
		chat 'strsignal(3)/sys_siglist[] not found; signal descriptions will be unavailable'
		;;
esac

# TODO: check also for ioctl.h, stropts.h ?
for header in 'sys/select.h' 'sys/ioctl.h'; do
	if echo "#include <$header>" | $CC -E ->/dev/null; then
		echo "$header" | sed	\
			-e y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/	\
			-e 's/[^[:alnum:]_]/_/g'	\
			-e 's/^/#define HAVE_/'
		chat "<$header> found"
	else
		chat "<$header> not found; probably nbd"
	fi
done

# feature_test_macros(7)
[ -n $define_BSD ] && echo '#define _BSD_SOURCE
#define _DEFAULT_SOURCE'
[ -n $define_DARWIN ] && echo '#define _DARWIN_C_SOURCE'
[ -n $define_GNU ] && echo '#define _GNU_SOURCE'
[ -n $define_POSIX2008 ] && echo '#define _POSIX_C_SOURCE 200809L'

# cheekily just pop this one in unconditionally; see ssss.c comments on
# feature_test_macros(7)
echo '#define _XOPEN_SOURCE 500'

echo '
#endif /* CONFIG_H */'
